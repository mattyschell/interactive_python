# Implementation of classic arcade game Pong
# Matt! 11/10/12
# Hi to evaluators from Washington DC, USA.  THANKS

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2



# helper function that spawns a ball, returns a position vector and a velocity vector
# if right is True, spawn to the right, else spawn to the left
def ball_init(right):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [300,200]
     
    if right == True:
        #ball starts to up right
        ball_vel[0] = random.randrange(120, 240)/60
        ball_vel[1] = -random.randrange(60, 180)/60 
    else:
        #ball starts to up left
        ball_vel[0] = -random.randrange(120, 240)/60
        ball_vel[1] = -random.randrange(60, 180)/60 


# define event handlers
def init():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are floats
    global PLAYER_1, PLAYER_2  # these are ints
    global ball_vel
    
    paddle1_pos = [PAD_WIDTH/2, HEIGHT/2]
    paddle2_pos = [(WIDTH - PAD_WIDTH/2), HEIGHT/2]
    
    #init paddle velocity to 0. Y only
    paddle1_vel = 0
    paddle2_vel = 0
    ball_vel = [0,0]
    PLAYER_1 = 0
    PLAYER_2 = 0
    

def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    global PLAYER_1, PLAYER_2
    # update paddle's vertical position, keep paddle on the screen

    #paddle1
    if (paddle1_pos[1] - HALF_PAD_HEIGHT) >= 0 and (paddle1_pos[1] + HALF_PAD_HEIGHT) <= HEIGHT:
       paddle1_pos[1] += paddle1_vel
    elif (paddle1_pos[1] - HALF_PAD_HEIGHT) < 0:
        paddle1_pos[1] = HALF_PAD_HEIGHT
    elif (paddle1_pos[1] + HALF_PAD_HEIGHT) > HEIGHT:
       paddle1_pos[1] = HEIGHT - HALF_PAD_HEIGHT
        
    #paddle2
    if (paddle2_pos[1] - HALF_PAD_HEIGHT) >= 0 and (paddle2_pos[1] + HALF_PAD_HEIGHT) <= HEIGHT:
       paddle2_pos[1] += paddle2_vel
    elif (paddle2_pos[1] - HALF_PAD_HEIGHT) < 0:
        paddle2_pos[1] = HALF_PAD_HEIGHT
    elif (paddle2_pos[1] + HALF_PAD_HEIGHT) > HEIGHT:
       paddle2_pos[1] = HEIGHT - HALF_PAD_HEIGHT
        
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    # draw paddles
    #left
    c.draw_line([paddle1_pos[0] - 1, (paddle1_pos[1] - HALF_PAD_HEIGHT)], [paddle1_pos[0] - 1, (paddle1_pos[1] + HALF_PAD_HEIGHT)], PAD_WIDTH, "Blue")
    #right 
    c.draw_line([paddle2_pos[0] + 1, (paddle2_pos[1] - HALF_PAD_HEIGHT)], [paddle2_pos[0] + 1, (paddle2_pos[1] + HALF_PAD_HEIGHT)], PAD_WIDTH, "Blue")
     
    # update ball top and bottom and left and right
    if ball_pos[0] <= (PAD_WIDTH + BALL_RADIUS):
        #left gutter
        #check for paddle1
        if (ball_pos[1] < (paddle1_pos[1] + HALF_PAD_HEIGHT)) and (ball_pos[1] > (paddle1_pos[1] - HALF_PAD_HEIGHT)):
           #reflect off left paddle
           ball_vel[0] = (-ball_vel[0] * 1.1)
           ball_pos[0] += ball_vel[0]
           ball_pos[1] += ball_vel[1]
        else:
           #left gutter point to player 2
           PLAYER_2 = PLAYER_2 + 1
           ball_init(True)
    elif ball_pos[0] >= (WIDTH - PAD_WIDTH  - BALL_RADIUS):
        #right gutter
        #check for right paddle 
        if (ball_pos[1] < (paddle2_pos[1] + HALF_PAD_HEIGHT)) and (ball_pos[1] > (paddle2_pos[1] - HALF_PAD_HEIGHT)):
           #reflect off right paddle
           ball_vel[0] = (-ball_vel[0] * 1.1)
           ball_pos[0] += ball_vel[0]
           ball_pos[1] += ball_vel[1]
        else:
           #right gutter point to player 1
           PLAYER_1 = PLAYER_1 + 1
           ball_init(False)
    elif ball_pos[1] <= BALL_RADIUS:
        #reflect off bottom
        ball_pos[0] += ball_vel[0]
        ball_vel[1] = -ball_vel[1]
        ball_pos[1] += ball_vel[1]
    elif ball_pos[1] >= ((HEIGHT - 1) - BALL_RADIUS):
        #reflect off top looks the same as bottom
        ball_pos[0] += ball_vel[0]
        ball_vel[1] = -ball_vel[1]
        ball_pos[1] += ball_vel[1]
    else:
        ball_pos[0] += ball_vel[0]
        ball_pos[1] += ball_vel[1]
            
    # draw 
    c.draw_circle(ball_pos, BALL_RADIUS, 1, "White", "Red")
    #print scores
    c.draw_text(str(PLAYER_1), (150, 50), 18, "White")
    c.draw_text(str(PLAYER_2), (450, 50), 18, "White")
    
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    
    #update paddle velocity
    
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = paddle1_vel - 3
    elif key == simplegui.KEY_MAP['s']:
        paddle1_vel = paddle1_vel + 3
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel = paddle2_vel - 3
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel = paddle2_vel + 3
   
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP['s']:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel = 0


def restart():
    init()
    ball_init(random.choice([True,False]))

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", restart, 100)


# start frame
init()
frame.start()
#randomize left right on initialization
ball_init(random.choice([True,False]))