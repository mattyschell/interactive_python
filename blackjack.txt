# Mini-project #6 - Blackjack
# Matt! 11/28/12
# Hi to evaluators from Washington, DC, USA. THANKS

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
dealer_message = "DEALER     "
player_message = "PLAYER     "

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.cards = []

    def __str__(self):
        templist = []
        for card in self.cards:
           templist.append(str(card))
        return str(templist)

    def add_card(self, card):
        #print "adding " + str(card)
        self.cards.append(card)

    # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
    def get_value(self):
        value = 0
        aces = 0
        for card in self.cards:
            value = value + VALUES[card.get_rank()]
            if card.get_rank() == 'A':
                aces = 1
        if aces == 1 and (value + 10) <= 21:
            value = value + 10
        return value          
    
    def draw(self, canvas, p):
        kount = 0
        for c in self.cards:
            c.draw(canvas, [(p[0] + (kount * CARD_SIZE[0])), p[1]])
            kount = kount + 1
 
        
# define deck class
class Deck:
    def __init__(self):
        self.cards = []
        #just say no to tricksy loops
        for suit in SUITS:
            for rank in RANKS:
                self.cards.append(Card(suit, rank))
        #random.shuffle(self.cards)                

    # add cards back to deck and shuffle
    def shuffle(self):
        random.shuffle(self.cards)

    def deal_card(self):
        return self.cards.pop(0)
    
    def __str__(self):
        templist = []
        for card in self.cards:
           templist.append(str(card))
        return str(templist)



#define event handlers for buttons
def deal():
    global outcome, in_play, dealer_message, player_message
    global player_hand, dealer_hand, my_deck, score
    
    if in_play == True:
        player_message = "PLAYER      Sore loser! New deal?"     
        in_play = False
        score = score - 1
    else:
        my_deck = Deck()
        my_deck.shuffle()
        player_hand = Hand()
        dealer_hand = Hand()
        player_hand.add_card(my_deck.deal_card())
        dealer_hand.add_card(my_deck.deal_card())
        player_hand.add_card(my_deck.deal_card())
        dealer_hand.add_card(my_deck.deal_card())
    
        #print "player hand is " + str(player_hand)
        #print "dealer hand is " + str(dealer_hand)
        #print "player value is " + str(player_hand.get_value())
     
        dealer_message = "DEALER"
        player_message = "PLAYER     Hit or Stand?" 
        in_play = True
    

def hit():
    
    global player_message, in_play, score
    # if the hand is in play, hit the player
    if in_play == True and player_hand.get_value() <= 21:
        player_hand.add_card(my_deck.deal_card())   
   
        #print "player hand is " + str(player_hand)
        
    # if busted, assign an message to outcome, update in_play and score
    if player_hand.get_value() > 21:
        #print "player busted"
        player_message = "PLAYER      busted! New deal?"     
        in_play = False
        score = score - 1
       
def stand():
    global dealer_hand, in_play, player_message, dealer_message, score
    
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if player_hand.get_value() > 21:
        #no score
        player_message = "PLAYER      busted! New deal?"     
    elif in_play == True:
        #print "in play true"
        #print "dealer hand is " + str(dealer_hand)
        #print "dealer val is " + str(dealer_hand.get_value())
        while dealer_hand.get_value() < 17:
            dealer_hand.add_card(my_deck.deal_card())
            #print "dealer value is " + str(dealer_hand.get_value())
            #print "dealer hand is " + str(dealer_hand)
            
        if dealer_hand.get_value() > 21:
            player_message = "PLAYER      Wins! New deal?"     
            dealer_message = "DEALER      Busted"   
            score = score + 1
        elif player_hand.get_value() <= dealer_hand.get_value():
            player_message = "PLAYER      New deal?"     
            dealer_message = "DEALER      Wins"
            score = score - 1
        else:
            player_message = "PLAYER      Wins! New deal?"     
            dealer_message = "DEALER      Busted"
            score = score + 1
            
    in_play = False
    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    global player_hand, dealer_hand, player_message 
    global dealer_message, score, in_play
    dealer_hand.draw(canvas, [100,200])
    player_hand.draw(canvas, [100,400])
    
    canvas.draw_text("Blackjack", (100, 50), 24, "White")
    canvas.draw_text(player_message, (100, 375), 24, "Black")
    canvas.draw_text(dealer_message, (100, 175), 24, "Black")
    canvas.draw_text("Score: " + str(score), (300, 50), 24, "White")
    if in_play == True:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE,[136.5,249],CARD_BACK_SIZE)

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# deal an initial hand
deal()

# get things rolling
frame.start()